{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { passengerEmailGet } from '../fn/passenger/passenger-email-get';\nimport { passengerEmailGet$Plain } from '../fn/passenger/passenger-email-get-plain';\nimport { passengerPost } from '../fn/passenger/passenger-post';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class PassengerService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `passengerPost()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `passengerPost()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  passengerPost$Response(params, context) {\n    return passengerPost(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `passengerPost$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  passengerPost(params, context) {\n    return this.passengerPost$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `passengerEmailGet()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `passengerEmailGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  passengerEmailGet$Plain$Response(params, context) {\n    return passengerEmailGet$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `passengerEmailGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  passengerEmailGet$Plain(params, context) {\n    return this.passengerEmailGet$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `passengerEmailGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  passengerEmailGet$Response(params, context) {\n    return passengerEmailGet(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `passengerEmailGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  passengerEmailGet(params, context) {\n    return this.passengerEmailGet$Response(params, context).pipe(map(r => r.body));\n  }\n}\nPassengerService.PassengerPostPath = '/Passenger';\nPassengerService.PassengerEmailGetPath = '/Passenger/{email}';\nPassengerService.ɵfac = function PassengerService_Factory(t) {\n  return new (t || PassengerService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nPassengerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PassengerService,\n  factory: PassengerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAI7C,SAASC,iBAAiB,QAAQ,qCAAqC;AAEvE,SAASC,uBAAuB,QAAQ,2CAA2C;AAEnF,SAASC,aAAa,QAAQ,gCAAgC;;;;AAK9D,OAAM,MAAOC,gBAAiB,SAAQJ,WAAW;EAC/CK,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,sBAAsB,CAACC,MAA6B,EAAEC,OAAqB;IACzE,OAAOP,aAAa,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAChE;EAEA;;;;;;EAMAP,aAAa,CAACM,MAA6B,EAAEC,OAAqB;IAChE,OAAO,IAAI,CAACF,sBAAsB,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACtDb,GAAG,CAAEc,CAA2B,IAAWA,CAAC,CAACC,IAAI,CAAC,CACnD;EACH;EAEA;;EAGA;;;;;;EAMAC,gCAAgC,CAACN,MAAsC,EAAEC,OAAqB;IAC5F,OAAOR,uBAAuB,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC1E;EAEA;;;;;;EAMAR,uBAAuB,CAACO,MAAsC,EAAEC,OAAqB;IACnF,OAAO,IAAI,CAACK,gCAAgC,CAACN,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAChEb,GAAG,CAAEc,CAAkC,IAAkBA,CAAC,CAACC,IAAI,CAAC,CACjE;EACH;EAEA;;;;;;EAMAE,0BAA0B,CAACP,MAAgC,EAAEC,OAAqB;IAChF,OAAOT,iBAAiB,CAAC,IAAI,CAACM,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACpE;EAEA;;;;;;EAMAT,iBAAiB,CAACQ,MAAgC,EAAEC,OAAqB;IACvE,OAAO,IAAI,CAACM,0BAA0B,CAACP,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC1Db,GAAG,CAAEc,CAAkC,IAAkBA,CAAC,CAACC,IAAI,CAAC,CACjE;EACH;;AA3EWV,gBAAiB,CAMZa,iBAAiB,GAAG,YAAY;AANrCb,gBAAiB,CA+BZc,qBAAqB,GAAG,oBAAoB;AA/BjDd,gBAAiB;mBAAjBA,gBAAgB;AAAA;AAAhBA,gBAAiB;SAAjBA,gBAAgB;EAAAe,SAAhBf,gBAAgB;EAAAgB,YADH;AAAM","names":["map","BaseService","passengerEmailGet","passengerEmailGet$Plain","passengerPost","PassengerService","constructor","config","http","passengerPost$Response","params","context","rootUrl","pipe","r","body","passengerEmailGet$Plain$Response","passengerEmailGet$Response","PassengerPostPath","PassengerEmailGetPath","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Eldreney\\source\\repos\\Flights\\Flights\\ClientApp\\src\\app\\api\\services\\passenger.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { passengerEmailGet } from '../fn/passenger/passenger-email-get';\r\nimport { PassengerEmailGet$Params } from '../fn/passenger/passenger-email-get';\r\nimport { passengerEmailGet$Plain } from '../fn/passenger/passenger-email-get-plain';\r\nimport { PassengerEmailGet$Plain$Params } from '../fn/passenger/passenger-email-get-plain';\r\nimport { passengerPost } from '../fn/passenger/passenger-post';\r\nimport { PassengerPost$Params } from '../fn/passenger/passenger-post';\r\nimport { PassengerRm } from '../models/passenger-rm';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PassengerService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `passengerPost()` */\r\n  static readonly PassengerPostPath = '/Passenger';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `passengerPost()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  passengerPost$Response(params?: PassengerPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\r\n    return passengerPost(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `passengerPost$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  passengerPost(params?: PassengerPost$Params, context?: HttpContext): Observable<void> {\r\n    return this.passengerPost$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `passengerEmailGet()` */\r\n  static readonly PassengerEmailGetPath = '/Passenger/{email}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `passengerEmailGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  passengerEmailGet$Plain$Response(params: PassengerEmailGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<PassengerRm>> {\r\n    return passengerEmailGet$Plain(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `passengerEmailGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  passengerEmailGet$Plain(params: PassengerEmailGet$Plain$Params, context?: HttpContext): Observable<PassengerRm> {\r\n    return this.passengerEmailGet$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<PassengerRm>): PassengerRm => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `passengerEmailGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  passengerEmailGet$Response(params: PassengerEmailGet$Params, context?: HttpContext): Observable<StrictHttpResponse<PassengerRm>> {\r\n    return passengerEmailGet(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `passengerEmailGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  passengerEmailGet(params: PassengerEmailGet$Params, context?: HttpContext): Observable<PassengerRm> {\r\n    return this.passengerEmailGet$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<PassengerRm>): PassengerRm => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}