{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { flightGet } from '../fn/flight/flight-get';\nimport { flightGet$Plain } from '../fn/flight/flight-get-plain';\nimport { flightIdGet } from '../fn/flight/flight-id-get';\nimport { flightIdGet$Plain } from '../fn/flight/flight-id-get-plain';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class FlightService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `flightGet()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `flightGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  flightGet$Plain$Response(params, context) {\n    return flightGet$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `flightGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  flightGet$Plain(params, context) {\n    return this.flightGet$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `flightGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  flightGet$Response(params, context) {\n    return flightGet(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `flightGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  flightGet(params, context) {\n    return this.flightGet$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `flightIdGet()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `flightIdGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  flightIdGet$Plain$Response(params, context) {\n    return flightIdGet$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `flightIdGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  flightIdGet$Plain(params, context) {\n    return this.flightIdGet$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `flightIdGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  flightIdGet$Response(params, context) {\n    return flightIdGet(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `flightIdGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  flightIdGet(params, context) {\n    return this.flightIdGet$Response(params, context).pipe(map(r => r.body));\n  }\n}\nFlightService.FlightGetPath = '/Flight';\nFlightService.FlightIdGetPath = '/Flight/{id}';\nFlightService.ɵfac = function FlightService_Factory(t) {\n  return new (t || FlightService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nFlightService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FlightService,\n  factory: FlightService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAI7C,SAASC,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,eAAe,QAAQ,+BAA+B;AAE/D,SAASC,WAAW,QAAQ,4BAA4B;AAExD,SAASC,iBAAiB,QAAQ,kCAAkC;;;;AAKpE,OAAM,MAAOC,aAAc,SAAQL,WAAW;EAC5CM,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,wBAAwB,CAACC,MAA+B,EAAEC,OAAqB;IAC7E,OAAOT,eAAe,CAAC,IAAI,CAACM,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAClE;EAEA;;;;;;EAMAT,eAAe,CAACQ,MAA+B,EAAEC,OAAqB;IACpE,OAAO,IAAI,CAACF,wBAAwB,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACxDd,GAAG,CAAEe,CAAsC,IAAsBA,CAAC,CAACC,IAAI,CAAC,CACzE;EACH;EAEA;;;;;;EAMAC,kBAAkB,CAACN,MAAyB,EAAEC,OAAqB;IACjE,OAAOV,SAAS,CAAC,IAAI,CAACO,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC5D;EAEA;;;;;;EAMAV,SAAS,CAACS,MAAyB,EAAEC,OAAqB;IACxD,OAAO,IAAI,CAACK,kBAAkB,CAACN,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAClDd,GAAG,CAAEe,CAAsC,IAAsBA,CAAC,CAACC,IAAI,CAAC,CACzE;EACH;EAEA;;EAGA;;;;;;EAMAE,0BAA0B,CAACP,MAAgC,EAAEC,OAAqB;IAChF,OAAOP,iBAAiB,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACpE;EAEA;;;;;;EAMAP,iBAAiB,CAACM,MAAgC,EAAEC,OAAqB;IACvE,OAAO,IAAI,CAACM,0BAA0B,CAACP,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC1Dd,GAAG,CAAEe,CAA+B,IAAeA,CAAC,CAACC,IAAI,CAAC,CAC3D;EACH;EAEA;;;;;;EAMAG,oBAAoB,CAACR,MAA0B,EAAEC,OAAqB;IACpE,OAAOR,WAAW,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC9D;EAEA;;;;;;EAMAR,WAAW,CAACO,MAA0B,EAAEC,OAAqB;IAC3D,OAAO,IAAI,CAACO,oBAAoB,CAACR,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACpDd,GAAG,CAAEe,CAA+B,IAAeA,CAAC,CAACC,IAAI,CAAC,CAC3D;EACH;;AAjGWV,aAAc,CAMTc,aAAa,GAAG,SAAS;AAN9Bd,aAAc,CAqDTe,eAAe,GAAG,cAAc;AArDrCf,aAAc;mBAAdA,aAAa;AAAA;AAAbA,aAAc;SAAdA,aAAa;EAAAgB,SAAbhB,aAAa;EAAAiB,YADA;AAAM","names":["map","BaseService","flightGet","flightGet$Plain","flightIdGet","flightIdGet$Plain","FlightService","constructor","config","http","flightGet$Plain$Response","params","context","rootUrl","pipe","r","body","flightGet$Response","flightIdGet$Plain$Response","flightIdGet$Response","FlightGetPath","FlightIdGetPath","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Eldreney\\source\\repos\\Flights\\Flights\\ClientApp\\src\\app\\api\\services\\flight.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { flightGet } from '../fn/flight/flight-get';\r\nimport { FlightGet$Params } from '../fn/flight/flight-get';\r\nimport { flightGet$Plain } from '../fn/flight/flight-get-plain';\r\nimport { FlightGet$Plain$Params } from '../fn/flight/flight-get-plain';\r\nimport { flightIdGet } from '../fn/flight/flight-id-get';\r\nimport { FlightIdGet$Params } from '../fn/flight/flight-id-get';\r\nimport { flightIdGet$Plain } from '../fn/flight/flight-id-get-plain';\r\nimport { FlightIdGet$Plain$Params } from '../fn/flight/flight-id-get-plain';\r\nimport { FlightRm } from '../models/flight-rm';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FlightService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `flightGet()` */\r\n  static readonly FlightGetPath = '/Flight';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `flightGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  flightGet$Plain$Response(params?: FlightGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FlightRm>>> {\r\n    return flightGet$Plain(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `flightGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  flightGet$Plain(params?: FlightGet$Plain$Params, context?: HttpContext): Observable<Array<FlightRm>> {\r\n    return this.flightGet$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<FlightRm>>): Array<FlightRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `flightGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  flightGet$Response(params?: FlightGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FlightRm>>> {\r\n    return flightGet(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `flightGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  flightGet(params?: FlightGet$Params, context?: HttpContext): Observable<Array<FlightRm>> {\r\n    return this.flightGet$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<FlightRm>>): Array<FlightRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `flightIdGet()` */\r\n  static readonly FlightIdGetPath = '/Flight/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `flightIdGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  flightIdGet$Plain$Response(params: FlightIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<FlightRm>> {\r\n    return flightIdGet$Plain(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `flightIdGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  flightIdGet$Plain(params: FlightIdGet$Plain$Params, context?: HttpContext): Observable<FlightRm> {\r\n    return this.flightIdGet$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<FlightRm>): FlightRm => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `flightIdGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  flightIdGet$Response(params: FlightIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<FlightRm>> {\r\n    return flightIdGet(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `flightIdGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  flightIdGet(params: FlightIdGet$Params, context?: HttpContext): Observable<FlightRm> {\r\n    return this.flightIdGet$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<FlightRm>): FlightRm => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}