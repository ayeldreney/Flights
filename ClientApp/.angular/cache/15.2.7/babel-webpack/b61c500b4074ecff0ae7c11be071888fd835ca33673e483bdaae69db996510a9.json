{"ast":null,"code":"{\n  {\n    providedIn: 'root';\n  }\n}\nexport class BookFlightComponent {\n  constructor(route, flightService) {\n    this.route = route;\n    this.flightService = flightService;\n    this.flightId = \"not loaded\";\n    this.flight = {};\n    this.findFlight = flightId => {\n      this.flightId = flightId ?? \"not passed\";\n      this.flightService.findFlight({\n        id: this.flightId\n      }).subscribe(flight => this.flight = flight, this.handleError);\n    };\n    this.handleError = err => {\n      console.log(\"Response Error. Status: \", err.status);\n      console.log(\"Response Error. Status Text: \", err.statusText);\n      console.log(err);\n    };\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(p => {\n      console.log(this.flightId);\n      this.findFlight(p.get(\"flightId\"));\n    });\n  }\n}","map":{"version":3,"mappings":"AAcW;EACT;IAAEA,UAAU,EAAE,MAAM;;;AAKtB,OAAM,MAAOC,mBAAmB;EAQ9BC,YAAoBC,KAAqB,EAAUC,aAA4B;IAA3D,UAAK,GAALD,KAAK;IAA0B,kBAAa,GAAbC,aAAa;IAgBhE,aAAQ,GAAW,YAAY;IAC/B,WAAM,GAAa,EAAE;IAOb,eAAU,GAAIC,QAAuB,IAAI;MAE/C,IAAI,CAACA,QAAQ,GAAGA,QAAQ,IAAI,YAAY;MAExC,IAAI,CAACD,aAAa,CAACE,UAAU,CAAC;QAAEC,EAAE,EAAE,IAAI,CAACF;MAAQ,CAAE,CAAC,CAACG,SAAS,CAACC,MAAM,IAAI,IAAI,CAACA,MAAM,GAAGA,MAAM,EAAE,IAAI,CAACC,WAAW,CAAC;IAGlH,CAAC;IAGO,gBAAW,GAAIC,GAAQ,IAAI;MACjCC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,GAAG,CAACG,MAAM,CAAC;MACnDF,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,GAAG,CAACI,UAAU,CAAC;MAC5DH,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAClB,CAAC;EAtCkF;EACjFK,QAAQ;IACN,IAAI,CAACb,KAAK,CAACc,QAAQ,CAACT,SAAS,CAACU,CAAC,IAAG;MAChCN,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,QAAQ,CAAC;MAE1B,IAAI,CAACC,UAAU,CAACY,CAAC,CAACC,GAAG,CAAC,UAAU,CAAC,CAAC;IAIpC,CAAC,CAAC;EAGJ","names":["providedIn","BookFlightComponent","constructor","route","flightService","flightId","findFlight","id","subscribe","flight","handleError","err","console","log","status","statusText","ngOnInit","paramMap","p","get"],"sourceRoot":"","sources":["C:\\Users\\Eldreney\\source\\repos\\Flights\\Flights\\ClientApp\\src\\app\\book-flight\\book-flight.component.ts"],"sourcesContent":["import { Component, Injectable, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router'\nimport { FlightService } from '../api/services';\r\nimport { FlightRm } from '../api/models/flight-rm';\r\n\r\n\r\n@Component({\n  selector: 'app-book-flight',\n  templateUrl: './book-flight.component.html',\n  styleUrls: ['./book-flight.component.css'],\n  providers: [FlightService]\n})\n\n\n@Injectable{\r\n  { providedIn: 'root' }\r\n}\n \n\n\nexport class BookFlightComponent implements OnInit {\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n  constructor(private route: ActivatedRoute, private flightService: FlightService) { }\r\n    ngOnInit(): void {\r\n      this.route.paramMap.subscribe(p => {\r\n        console.log(this.flightId)\r\n\r\n        this.findFlight(p.get(\"flightId\"))\r\n\r\n\r\n\r\n      })\r\n  \r\n\r\n    }\r\n\r\n\r\n\r\n  flightId: string = \"not loaded\";\r\n  flight: FlightRm = {};\r\n\r\n\r\n\r\n  \n\n\n  private findFlight = (flightId: string | null) => {\n   \n    this.flightId = flightId ?? \"not passed\";\n\n    this.flightService.findFlight({ id: this.flightId }).subscribe(flight => this.flight = flight, this.handleError);\n\n\n  }\n\n\n  private handleError = (err: any) => {\r\n    console.log(\"Response Error. Status: \", err.status)\r\n    console.log(\"Response Error. Status Text: \", err.statusText)\r\n    console.log(err)\r\n  }\r\n\n\n\n\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}